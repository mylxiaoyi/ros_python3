// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laserscan.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "laserscan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#pragma GCC diagnostic ignored "-Wshadow"
// @@protoc_insertion_point(includes)

namespace gazebo {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* LaserScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaserScan_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_laserscan_2eproto() {
  protobuf_AddDesc_laserscan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "laserscan.proto");
  GOOGLE_CHECK(file != NULL);
  LaserScan_descriptor_ = file->message_type(0);
  static const int LaserScan_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, world_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, angle_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, range_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, vertical_angle_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, vertical_angle_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, vertical_angle_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, vertical_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, intensities_),
  };
  LaserScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaserScan_descriptor_,
      LaserScan::default_instance_,
      LaserScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaserScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaserScan));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_laserscan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaserScan_descriptor_, &LaserScan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_laserscan_2eproto() {
  delete LaserScan::default_instance_;
  delete LaserScan_reflection_;
}

void protobuf_AddDesc_laserscan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_pose_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017laserscan.proto\022\013gazebo.msgs\032\npose.pro"
    "to\"\302\002\n\tLaserScan\022\r\n\005frame\030\001 \002(\t\022%\n\nworld"
    "_pose\030\002 \002(\0132\021.gazebo.msgs.Pose\022\021\n\tangle_"
    "min\030\003 \002(\001\022\021\n\tangle_max\030\004 \002(\001\022\022\n\nangle_st"
    "ep\030\005 \002(\001\022\021\n\trange_min\030\006 \002(\001\022\021\n\trange_max"
    "\030\007 \002(\001\022\r\n\005count\030\010 \002(\r\022\032\n\022vertical_angle_"
    "min\030\t \001(\001\022\032\n\022vertical_angle_max\030\n \001(\001\022\033\n"
    "\023vertical_angle_step\030\013 \001(\001\022\026\n\016vertical_c"
    "ount\030\014 \001(\r\022\016\n\006ranges\030\r \003(\001\022\023\n\013intensitie"
    "s\030\016 \003(\001", 367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "laserscan.proto", &protobuf_RegisterTypes);
  LaserScan::default_instance_ = new LaserScan();
  LaserScan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_laserscan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_laserscan_2eproto {
  StaticDescriptorInitializer_laserscan_2eproto() {
    protobuf_AddDesc_laserscan_2eproto();
  }
} static_descriptor_initializer_laserscan_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LaserScan::kFrameFieldNumber;
const int LaserScan::kWorldPoseFieldNumber;
const int LaserScan::kAngleMinFieldNumber;
const int LaserScan::kAngleMaxFieldNumber;
const int LaserScan::kAngleStepFieldNumber;
const int LaserScan::kRangeMinFieldNumber;
const int LaserScan::kRangeMaxFieldNumber;
const int LaserScan::kCountFieldNumber;
const int LaserScan::kVerticalAngleMinFieldNumber;
const int LaserScan::kVerticalAngleMaxFieldNumber;
const int LaserScan::kVerticalAngleStepFieldNumber;
const int LaserScan::kVerticalCountFieldNumber;
const int LaserScan::kRangesFieldNumber;
const int LaserScan::kIntensitiesFieldNumber;
#endif  // !_MSC_VER

LaserScan::LaserScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LaserScan::InitAsDefaultInstance() {
  world_pose_ = const_cast< ::gazebo::msgs::Pose*>(&::gazebo::msgs::Pose::default_instance());
}

LaserScan::LaserScan(const LaserScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LaserScan::SharedCtor() {
  _cached_size_ = 0;
  frame_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  world_pose_ = NULL;
  angle_min_ = 0;
  angle_max_ = 0;
  angle_step_ = 0;
  range_min_ = 0;
  range_max_ = 0;
  count_ = 0u;
  vertical_angle_min_ = 0;
  vertical_angle_max_ = 0;
  vertical_angle_step_ = 0;
  vertical_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaserScan::~LaserScan() {
  SharedDtor();
}

void LaserScan::SharedDtor() {
  if (frame_ != &::google::protobuf::internal::kEmptyString) {
    delete frame_;
  }
  if (this != default_instance_) {
    delete world_pose_;
  }
}

void LaserScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaserScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaserScan_descriptor_;
}

const LaserScan& LaserScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_laserscan_2eproto();
  return *default_instance_;
}

LaserScan* LaserScan::default_instance_ = NULL;

LaserScan* LaserScan::New() const {
  return new LaserScan;
}

void LaserScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_frame()) {
      if (frame_ != &::google::protobuf::internal::kEmptyString) {
        frame_->clear();
      }
    }
    if (has_world_pose()) {
      if (world_pose_ != NULL) world_pose_->::gazebo::msgs::Pose::Clear();
    }
    angle_min_ = 0;
    angle_max_ = 0;
    angle_step_ = 0;
    range_min_ = 0;
    range_max_ = 0;
    count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vertical_angle_min_ = 0;
    vertical_angle_max_ = 0;
    vertical_angle_step_ = 0;
    vertical_count_ = 0u;
  }
  ranges_.Clear();
  intensities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaserScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string frame = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->frame().data(), this->frame().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_world_pose;
        break;
      }

      // required .gazebo.msgs.Pose world_pose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_world_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_angle_min;
        break;
      }

      // required double angle_min = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_min_)));
          set_has_angle_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_angle_max;
        break;
      }

      // required double angle_max = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_max_)));
          set_has_angle_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_angle_step;
        break;
      }

      // required double angle_step = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_step_)));
          set_has_angle_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_range_min;
        break;
      }

      // required double range_min = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_range_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_min_)));
          set_has_range_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_range_max;
        break;
      }

      // required double range_max = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_range_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_max_)));
          set_has_range_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_count;
        break;
      }

      // required uint32 count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_vertical_angle_min;
        break;
      }

      // optional double vertical_angle_min = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vertical_angle_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_min_)));
          set_has_vertical_angle_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_vertical_angle_max;
        break;
      }

      // optional double vertical_angle_max = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vertical_angle_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_max_)));
          set_has_vertical_angle_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_vertical_angle_step;
        break;
      }

      // optional double vertical_angle_step = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vertical_angle_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_step_)));
          set_has_vertical_angle_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vertical_count;
        break;
      }

      // optional uint32 vertical_count = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertical_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vertical_count_)));
          set_has_vertical_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_ranges;
        break;
      }

      // repeated double ranges = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ranges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 105, input, this->mutable_ranges())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ranges())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_ranges;
        if (input->ExpectTag(113)) goto parse_intensities;
        break;
      }

      // repeated double intensities = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_intensities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 113, input, this->mutable_intensities())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_intensities())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_intensities;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LaserScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frame().data(), this->frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->frame(), output);
  }

  // required .gazebo.msgs.Pose world_pose = 2;
  if (has_world_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->world_pose(), output);
  }

  // required double angle_min = 3;
  if (has_angle_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->angle_min(), output);
  }

  // required double angle_max = 4;
  if (has_angle_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->angle_max(), output);
  }

  // required double angle_step = 5;
  if (has_angle_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->angle_step(), output);
  }

  // required double range_min = 6;
  if (has_range_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->range_min(), output);
  }

  // required double range_max = 7;
  if (has_range_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->range_max(), output);
  }

  // required uint32 count = 8;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->count(), output);
  }

  // optional double vertical_angle_min = 9;
  if (has_vertical_angle_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->vertical_angle_min(), output);
  }

  // optional double vertical_angle_max = 10;
  if (has_vertical_angle_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->vertical_angle_max(), output);
  }

  // optional double vertical_angle_step = 11;
  if (has_vertical_angle_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->vertical_angle_step(), output);
  }

  // optional uint32 vertical_count = 12;
  if (has_vertical_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->vertical_count(), output);
  }

  // repeated double ranges = 13;
  for (int i = 0; i < this->ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      13, this->ranges(i), output);
  }

  // repeated double intensities = 14;
  for (int i = 0; i < this->intensities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      14, this->intensities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LaserScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frame().data(), this->frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frame(), target);
  }

  // required .gazebo.msgs.Pose world_pose = 2;
  if (has_world_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->world_pose(), target);
  }

  // required double angle_min = 3;
  if (has_angle_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->angle_min(), target);
  }

  // required double angle_max = 4;
  if (has_angle_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->angle_max(), target);
  }

  // required double angle_step = 5;
  if (has_angle_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->angle_step(), target);
  }

  // required double range_min = 6;
  if (has_range_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->range_min(), target);
  }

  // required double range_max = 7;
  if (has_range_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->range_max(), target);
  }

  // required uint32 count = 8;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->count(), target);
  }

  // optional double vertical_angle_min = 9;
  if (has_vertical_angle_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->vertical_angle_min(), target);
  }

  // optional double vertical_angle_max = 10;
  if (has_vertical_angle_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->vertical_angle_max(), target);
  }

  // optional double vertical_angle_step = 11;
  if (has_vertical_angle_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->vertical_angle_step(), target);
  }

  // optional uint32 vertical_count = 12;
  if (has_vertical_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->vertical_count(), target);
  }

  // repeated double ranges = 13;
  for (int i = 0; i < this->ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(13, this->ranges(i), target);
  }

  // repeated double intensities = 14;
  for (int i = 0; i < this->intensities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(14, this->intensities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LaserScan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string frame = 1;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame());
    }

    // required .gazebo.msgs.Pose world_pose = 2;
    if (has_world_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_pose());
    }

    // required double angle_min = 3;
    if (has_angle_min()) {
      total_size += 1 + 8;
    }

    // required double angle_max = 4;
    if (has_angle_max()) {
      total_size += 1 + 8;
    }

    // required double angle_step = 5;
    if (has_angle_step()) {
      total_size += 1 + 8;
    }

    // required double range_min = 6;
    if (has_range_min()) {
      total_size += 1 + 8;
    }

    // required double range_max = 7;
    if (has_range_max()) {
      total_size += 1 + 8;
    }

    // required uint32 count = 8;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double vertical_angle_min = 9;
    if (has_vertical_angle_min()) {
      total_size += 1 + 8;
    }

    // optional double vertical_angle_max = 10;
    if (has_vertical_angle_max()) {
      total_size += 1 + 8;
    }

    // optional double vertical_angle_step = 11;
    if (has_vertical_angle_step()) {
      total_size += 1 + 8;
    }

    // optional uint32 vertical_count = 12;
    if (has_vertical_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vertical_count());
    }

  }
  // repeated double ranges = 13;
  {
    int data_size = 0;
    data_size = 8 * this->ranges_size();
    total_size += 1 * this->ranges_size() + data_size;
  }

  // repeated double intensities = 14;
  {
    int data_size = 0;
    data_size = 8 * this->intensities_size();
    total_size += 1 * this->intensities_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaserScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaserScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaserScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaserScan::MergeFrom(const LaserScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranges_.MergeFrom(from.ranges_);
  intensities_.MergeFrom(from.intensities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_world_pose()) {
      mutable_world_pose()->::gazebo::msgs::Pose::MergeFrom(from.world_pose());
    }
    if (from.has_angle_min()) {
      set_angle_min(from.angle_min());
    }
    if (from.has_angle_max()) {
      set_angle_max(from.angle_max());
    }
    if (from.has_angle_step()) {
      set_angle_step(from.angle_step());
    }
    if (from.has_range_min()) {
      set_range_min(from.range_min());
    }
    if (from.has_range_max()) {
      set_range_max(from.range_max());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vertical_angle_min()) {
      set_vertical_angle_min(from.vertical_angle_min());
    }
    if (from.has_vertical_angle_max()) {
      set_vertical_angle_max(from.vertical_angle_max());
    }
    if (from.has_vertical_angle_step()) {
      set_vertical_angle_step(from.vertical_angle_step());
    }
    if (from.has_vertical_count()) {
      set_vertical_count(from.vertical_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaserScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaserScan::CopyFrom(const LaserScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaserScan::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_world_pose()) {
    if (!this->world_pose().IsInitialized()) return false;
  }
  return true;
}

void LaserScan::Swap(LaserScan* other) {
  if (other != this) {
    std::swap(frame_, other->frame_);
    std::swap(world_pose_, other->world_pose_);
    std::swap(angle_min_, other->angle_min_);
    std::swap(angle_max_, other->angle_max_);
    std::swap(angle_step_, other->angle_step_);
    std::swap(range_min_, other->range_min_);
    std::swap(range_max_, other->range_max_);
    std::swap(count_, other->count_);
    std::swap(vertical_angle_min_, other->vertical_angle_min_);
    std::swap(vertical_angle_max_, other->vertical_angle_max_);
    std::swap(vertical_angle_step_, other->vertical_angle_step_);
    std::swap(vertical_count_, other->vertical_count_);
    ranges_.Swap(&other->ranges_);
    intensities_.Swap(&other->intensities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaserScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaserScan_descriptor_;
  metadata.reflection = LaserScan_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

GZ_REGISTER_STATIC_MSG("gazebo.msgs.LaserScan", LaserScan)
// @@protoc_insertion_point(global_scope)
